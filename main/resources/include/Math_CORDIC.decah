// Grenoble INP - Ensimag projet GL -*- mode: java -*-
// Library for class Math of Deca, coded in Deca

class Math {

    // declaration de PI
    float PI = 3.141592653589793  // à compléter

    float sin(float f) 
        f = f%(2*PI)-PI;

        float signe = 1.0; // signe du résultat

        // tester la valeur
        if ( f>-PI && f<-PI/2 )  {
            f = PI-f;        
        }
        if ( f>PI/2 && f<PI )  {
            f = PI-f;
            signe = -1.0;
        }
        // methode CORDIC
        float x = 0.6072529350088814;
        float y = 0.0;
        float z = f;
        int i = 0;
        while (i != 55) {
            temp = x;
            di = _table2atan(i);
            if (z >= 0)   {
                x = x - y*_pow(2, -i);
                y = y + temp*_pow(2,-i);
                z = z - di;
            }
            else    {
                x = x = x + y*_pow(2, -i);
                y = y - temp*_pow(2,-i);
                z = z + di;
            }        
            i = i+1;
        }
        return x*signe;
    }

    float cos(float f) {
        f = f%(2*PI)-PI;

        float signe = 1.0; // signe du résultat

        // tester la valeur
        if ( f>-PI && f<-PI/2 )  {
            f = f+PI;   
            signe = -1.0;
        }
        if ( f>PI/2 && f<PI )  {
            f = PI-f;
            signe = -1.0;
        }
        // methode CORDIC
        float x = 0.6072529350088814;
        float y = 0.0;
        float z = f;
        int i = 0;
        while (i != 55) {
            temp = x;
            di = _table2atan(i);
            if (z >= 0)   {
                x = x - y*_pow(2, -i);
                y = y + temp*_pow(2,-i);
                z = z - di;
            }
            else    {
                x = x = x + y*_pow(2, -i);
                y = y - temp*_pow(2,-i);
                z = z + di;
            }        
            i = i+1;
        }
        return y*signe;

    }

    float asin(float f) {
        // tester la valeur
        if ((f<-1)&&(f>1)) {
            // erreur : arret de l'execution du programme
            println("ERREUR : le paramètre doir etre compris dans [-1;1]");
            asm('ERROR');
        }
        else    {
            // methode de CORVIC
            float x = 1.0;
            float y = 0.0;
            float z = 0.0;
            float w = f;
            int i = 0;
            while (i != 55) {
                if (x<0)   { signx = -1}
                else { signx = 1}
                if (y<=w)   { sign = signx}
                else { sign = -signx}

                int r = 1;
                while (r != 3)  {
                    temp = x
                    if (sign > 0)   {
                        x = x - y*_pow(2, -i);
                        y = y + temp*_pow(2,-i)
                    }
                    else    {
                        x = x = x + y*_pow(2, -i);
                        y = y - temp*_pow(2,-i)  
                    } 
                }
                di = _table2atan(i);
                if (sign > 0)   {
                    z = z + di*2
                }
                else    {
                    z = z - di*2
                }
                w = w + w*pox(2,-i << 1)  // decalaaaage !!!!
                i = i+1
            }
            return z
        }

    }

    float atan(float f) {
        // TO DO
        float x = 1.0;
        float y = -f;
        float z = 0.0;
        int i = 0;
        while (i != 55) {
            if (y<=0)   { sign = 1}
            else { sign = -1}
            temp = x
            di = _table2atan(i);
            if (sign > 0)   {
                x = x - y*_pow(2, -i);
                y = y + temp*_pow(2,-i)
                z = z + di
            }
            else    {
                x = x = x + y*_pow(2, -i);
                y = y - temp*_pow(2,-i)  
                z = z - di
            }        
            i = i+1
        }
        return z
    }


    float ulp(float f) {
        println("ulp(f) not yet implemented");
    }


    // retourne le ième élement de la table des atan(2**(-i))
    float _table2atan(int i)    {
        if (i>=18)  {
            return _pow(2*, -i)
        }
        else    {
            if (i==0)   {
                return 0.785398163397448310
            }
            if (i==1)   {
                return 0.463647609000806116
            }
            if (i==2)   {
                return 0.244978663126864154
            }
            if (i==3)   {
                return 0.124354994546761435
            }
            if (i==4)   {
                return 0.0624188099959573485
            }
            if (i==5)   {
                return 0.0312398334302682763
            }
            if (i==6)   {
                return 0.0156237286204768308
            }
            if (i==7)   {
                return 0.00781234106010111130
            }
            if (i==8)   {
                return 0.00390623013196697183
            }
            if (i==9)   {
                return 0.00195312251647881869
            }
            if (i==10)   {
                return 0.000976562189559319430
            }
            if (i==11)   {
                return 0.000488281211194898275
            }
            if (i==12)   {
                return 0.000244140620149361764
            }
            if (i==13)   {
                return 0.000122070311893670204
            }
            if (i==14)   {
                return 0.0000610351561742087750
            }
            if (i==15)   {
                return 0.0000305175781155260969
            }
            if (i==16)   {
                return 0.0000152587890613157621
            }
            if (i==17)   {
                return 0.00000762939453110197026
            }
            // else : error (tous les cas sont traités)

            
        }
    }

// End of the methods

}


// End of Deca Math library
